//{
// Place your snippets for rust here. Each snippet is defined under a snippet name and has a prefix, body and 
// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
// same ids are connected.
// Example:
// "Print to console": {
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
//}
{
	"unit-test-gen": {
		"prefix": "test",
		"body": [
			"#[cfg(test)]",
			"mod tests {",
			"   use super::*;",
			"   #[test]",
			"   fn test() {",
			"       ${1://write test here}",
			"   }",
			"}"
		],
		"description": "create template for an unit test"
	},
	"derive-debug": {
		"prefix": "derive",
		"body": [
			"#[derive(Debug$0)]"
		],
		"description": "create template for derive trait"
	},
		"stateful-file-parse": {
		"prefix" : "stateful-file-parse",
        "body": [
            "use std::fs::{File, OpenOptions};",
            "use std::io::{BufRead, BufReader, BufWriter, Read, Seek, SeekFrom, Write};",
            "",
            "const PROGRESS_FILE: &str = \"progress.txt\";",
            "const INPUT_FILE: &str = \"input.log\";",
            "const OUTPUT_FILE: &str = \"output.log\";",
            "",
            "fn parse() -> std::io::Result<()> {",
            "    // Open the progress file for reading or create it if it doesn't exist",
            "    let mut progress_file = OpenOptions::new()",
            "        .read(true)",
            "        .write(true)",
            "        .create(true)",
            "        .open(PROGRESS_FILE)?;",
            "",
            "    // Read the byte offset of the last processed line from the progress file",
            "    let mut progress_str = String::new();",
            "    progress_file.read_to_string(&mut progress_str)?;",
            "    let progress = progress_str.trim().parse::<u64>().unwrap_or(0);",
            "",
            "    // Open the input file for reading and seek to the byte offset of the last processed line",
            "    let mut input_file = File::open(INPUT_FILE)?;",
            "    input_file.seek(SeekFrom::Start(progress))?;",
            "    let reader = BufReader::new(input_file);",
            "",
            "    // Open the output file for writing in append mode",
            "    let output_file = OpenOptions::new()",
            "        .create(true)",
            "        .append(true)",
            "        .open(OUTPUT_FILE)?;",
            "    let mut writer = BufWriter::new(output_file);",
            "",
            "    let mut total_bytes = progress;",
            "    for line in reader.lines() {",
            "        if let Ok(line) = line {",
            "            // Process the line here",
            "            // writeln!(writer, \"{}\", line)?;",
            "            ${1://write test here}",				
			"",
            "            // Update the byte offset in the progress file",
            "            total_bytes += line.len() as u64 + 1; // Add 1 for the newline character",
            "            progress_file.seek(SeekFrom::Start(0))?;",
            "            progress_file.write_all(total_bytes.to_string().as_bytes())?;",
            "            // progress_file.flush()?;",
            "        }",
            "    }",
            "    // writer.flush()?;",
            "",
            "    Ok(())",
            "}"
        ],
        "description": "Function to parse log files and update progress file."
    }
}
